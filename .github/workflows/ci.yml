name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies for testing
      run: |
        python -m pip install --upgrade pip
        # Install core dependencies
        pip install Flask==3.0.3 Flask-RESTful==0.3.10
        pip install pytest pytest-cov black flake8
        pip install nltk textblob
        # Set CI environment variable for tests
        echo "CI=true" >> $GITHUB_ENV
    
    - name: Lint with flake8
      run: |
        # Check for Python syntax errors
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Check code style (non-blocking)
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Format check with black
      run: |
        black --check --diff . || echo "Code formatting issues found (run 'black .' to fix)"
      continue-on-error: true

    - name: Basic import test
      run: |
        # Test that main modules can be imported without heavy dependencies
        python -c "
        try:
            from flask import Flask
            from flask_restful import Resource, Api
            print('✅ Flask imports working')
        except ImportError as e:
            print(f'❌ Flask import failed: {e}')
            exit(1)

        try:
            import nltk
            print('✅ NLTK import working')
        except ImportError as e:
            print(f'❌ NLTK import failed: {e}')
            exit(1)

        print('✅ Basic imports successful')
        "

    - name: Run tests
      run: |
        # Run existing pytest tests with proper mocking
        pytest tests/ -v --tb=short
        echo "✅ All tests completed successfully"

  security:
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail CI on security warnings
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check for security vulnerabilities
      run: |
        echo "Running security checks..."
        safety check --ignore 70612 || echo "Security check completed with warnings"
        bandit -r . -x tests/ || echo "Bandit scan completed with warnings"


